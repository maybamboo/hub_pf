<?xml version="1.0" encoding="UTF-8"?>

<workflows>

	<workflow id="default" xsl-path="../etc/xsls/clientehr/default">
	   <!--Se va a hacer una distincion para que pueda obtener el cnvenio cuando es consulta de pagos, ya que el xpath es distinto, y ese directorio debe existir-->
		<if test="not(not(/request-context/request/message/body/contract_id))">
			<echo id="convenio" name="CONV2" agreement-id="/request-context/request/message/body/contract_id" description="Se consulta por las politicas"/>
		</if>
		<else>
			<!--Si entra al if, significa que el xpath que se evalua en el if no existe, y que tenemos un mensaje de consulta de pagos-->
			<echo id="convenio" name="CONV2" agreement-id="/request-context/request/message/body/filters/contract_id" description="Se consulta por las politicas"/>	
		</else>

		<if test="/request-context/request/message/header/msg_type" equals="SCD01">
			<goto workflow="consulta_deuda" />
		</if>

		<elseif test="/request-context/request/message/header/msg_type" equals="SNP01" >

		  <if test="/requestnotificacion_pag-context/request/message/body/collector_id" equals="PPHR01">
		      <goto workflow="notificacion_pago_portal" />
		  </if>
		  <else>
		      <goto workflow="notificacion_pago" />
		  </else>

		</elseif>

		<!--Reintentos de notificacion de pago-->
		<elseif test="/request-context/request/message/header/msg_type" equals="SRNP01" >
		      <goto workflow="notificacion_pago" />
		</elseif>

		<!--Reintentos de reversa de pago-->
		<elseif test="/request-context/request/message/header/msg_type" equals="SRRP01" >
		      <goto workflow="reversa_pagos" />
		</elseif>

		<elseif test="/request-context/request/message/header/msg_type" equals="SNP01-C">									
			<goto workflow="notificacion_pago_conciliacion" />												
		</elseif>

		<elseif test="/request-context/request/message/header/msg_type" equals="SRP01">										
			<goto workflow="reversa_pagos" />												
		</elseif>

<!-- 
		<elseif test="/request-context/request/message/header/msg_type" equals="reinj-add-pago">
			<goto workflow="reinj-add-pago" />												
		</elseif>

		<elseif test="/request-context/request/message/header/msg_type" equals="reinj-update-debt">
			<goto workflow="reinj-update-debt" />												
		</elseif>


		<elseif test="/request-context/request/message/header/msg_type" equals="reinj-reversa-pago">
			<goto workflow="reinj-reversa-pagos" />												
		</elseif>
 -->

		<elseif test="/request-context/request/message/header/msg_type" equals="SCP01">										
			<goto workflow="consulta_pago" />												
		</elseif>



        <elseif test="/request-context/request/message/header/msg_type" equals="IPHUB">
			<goto workflow="intencion_pago" />
		</elseif>
		
		<elseif test="/request-context/request/message/header/msg_type" equals="COMPGO">
			<goto workflow="get_comprobante_pago" />
		</elseif>


		<elseif test="/request-context/request/message/header/msg_type" equals="CNV-PORTAL">
			<goto workflow="get_convenio_portal"/>
		</elseif>

		<else>
			<!--esto permite que le mensaje pueda pasar a través del web services-->
			<if test="not(not(/request-context/request/message/header/payment_date))">
				<return id="error_notificacion" />	
			</if>
			<else>
				<if test="not(not(/request-context/request/message/header/id_trx_rev))">
					<return id="error_reversa" />
				</if>
				<else>
					<return id="error" />
				</else>
			</else>

		</else> 				
	</workflow>


	<!--flujo de consulta de deuda-->
	<workflow id="consulta_deuda" xsl-path="../etc/xsls/clientehr/consulta_deuda">

		<service id="id_trx_eft" name="TRANS" description="Se obtiene id trx eft" />


		<!--<service id="convenio" name="CONV1" description="Se consultan todos los datos del convenio" cached="true" cached-if="/agreements/code= 0"/>-->

		<!--vamos a base de datos para ver si hay deudas asociadas al rut o al servicio-->
		<!--  esta consulta de parametros solo aplica si es deuda offline -->
		<if test="/request-context/services-responses/default/convenio/msg/reglas_consulta/reglas_consulta">
	       <service id="consulta_parametros" name="TRANS" description="Se consulta si existe rut o id_servicio en la deuda cargada en BD" />
	    </if>
			
      		<!--enviamos un mensaje para validar al servicio validador-->
		<!-- <service id="validaciones" name="ORC03" />  --> 
		 <call id="validaciones" workflow-file="../etc/workflows_validaciones.xml" workflow="default" />  	

		<!--verificamos que se cumplan todas las validaciones-->	
		<if test="not(/request-context/services-responses/consulta_deuda/validaciones/message/header/status_code) or  /request-context/services-responses/consulta_deuda/validaciones/message/header/status_code != 0">
			<!--retornamos un mensaje de error acorde al tag que no cumplió la validación-->
			<return id="error-validaciones" />
 		</if>


 		<!--Aqui se consulta por el tipo de modalidad de la consulta-->
 		<if test="/request-context/services-responses/default/convenio/msg/reglas_consulta/modalidad/offline = 1">
 			<!--La modalidad es batch-->

	 		<!--Si la poitica es por rut, se debe consultar por todos los id_servicios asociados al rut-->
	 		<if test="/request-context/services-responses/default/convenio/msg/reglas_consulta/politica = 1">
	 			<service id="consulta_creditos" name="TRANS" description="Se consultan los creditos asociados a el rut del cliente"/>
	 		</if>
			
	 		<!--internamente el xsl escoge la plantilla en base a la politica-->
	 		<service id="consulta_deuda_bd" name="TRANS" description="Se consulta por rut" />
	 	
	 		<!--validamos que la respuesta de la base de datos es exitosa-->
	 		<if test="/request-context/services-responses/consulta_deuda/consulta_deuda_bd/response/code = 0">
	 			<!--se valida que se haya devuelto información-->
	 			<!--internamente debemos validar que la base de datos haya devuelto algo, en caso contrario debemos devolver que el cliente no tiene deudas asociadas-->
	 			<return id="return"/>		
			</if>
			<else>
				<return id="error-consulta_deuda" />
			</else>		
 		</if>

 		<elseif test="/request-context/services-responses/default/convenio/msg/reglas_consulta/modalidad/online = 1">
 			<!--La modalidad es online-->

 			<!--Se despliega en el xml el mensaje a enviar a eps-->
 			<echo id="transformar" name="TRANSF" agreement-id="/request-context/request/message/body/contract_id" description="Se obtiene la transformacion para el mensaje de consulta"/>

 			<!--El mensaje se arma en base al echo anterior, y a las properties del administrador de convenios-->
 			<service id="consulta_deuda_ws" name="TRANS" description="Se consulta por la deuda a la eps"/>

 			<echo id="transformarResp" name="TRANSF" agreement-id="/request-context/request/message/body/contract_id" description="Se realiza la transformacion de la respuesta de la eps"/>

 			<!--Se deben mapear los errores de la eps-->
 			<!--Los errores de comunicacion se validan usando la respuesta del conector en bruto-->
 			<if test="/request-context/services-responses/consulta_deuda/consulta_deuda_ws/response/code = 0 and /request-context/services-responses/consulta_deuda/consulta_deuda_ws/response/data != ''">

					<!--validacion de negocio -->
					<if test="/request-context/services-responses/consulta_deuda/transformarResp/response/data/message/body/status/status_code != 0">
						<return id="return_linea_controlado"/>
					</if>
					<else>


					<!--Se utilizan para calcular las comisiones e impuestos-->
					<echo id="calculo_comisiones_linea" name="TRANSF"/>
					<echo id="calculo_impuesto" name="TRANSF"/>

					<!--Se obtiene un numero de valores equivalente al numero de secuencias-->
					<service id="obtener_doc_id" name="TRANS" description="Se obtienen valores de la secuencia para almacenar las deudas"/>
					<service id="guardar_consulta_bd" name="TRANS" description="Se almacena el resultado de la consulta de deuda en bd trx "/>

					<!--Esto se puede desligar al servicio reinyector-->
					<!--Se cambia la validacion a la bd trx, ya que es esta la que se consulta en la notificación de pago-->
					<if test="/request-context/services-responses/consulta_deuda/guardar_consulta_bd/response/code != 0 or not(/request-context/services-responses/consulta_deuda/guardar_consulta_bd/response/data)  or /request-context/services-responses/consulta_deuda/guardar_consulta_bd/response/data = -1">
						<return id="error-guardar_saldo"/>					
					</if>
					<else>
						<asyncservice id="guardar_consulta_bd_gestion" name="TRANS" description="Se almacena el resultado de la consulta de deuda en la bd gestion"/>
						<return id="return_linea"/>
					</else>
               </else>
 				
 			</if>
 			<else>
 				<!--Error de comunicación-->
 				<return id="error-comunicacion_ws"/>
 			</else>
 		</elseif>
 		<else>
 			<!--Reservado para la modalidad mixta-->

 		</else>


	</workflow>

	
	<workflow id="notificacion_pago" xsl-path="../etc/xsls/clientehr/notificacion_pago">

		<!--Se distingue el tipo de mensaje-->
		<if test="/request-context/request/message/header/msg_type = 'SRNP01'">
		
			<!-- conteo de reintentos -->
			<service id="actualizar-n-reintentos" name="TRANS" description="incrementa conteo reintentos" />	
			<asyncservice id="reinj-actualizar-n-reintentos" name="TRANS" description="incrementa conteo reintentos" />

			<service id="notificar_eps_ws" name="TRANS" description="Se envia notificacion de pago a la empresa de servicio"/>

			<!--Evaluar como solucionar esto, ya que seguramente la transformacion hace referencia a algunas rutas del xpath del flujo original-->
			<echo id="transformarResp" name="TRANSF" agreement-id="/request-context/request/message/body/contract_id" description="Se obtiene la transformacion para el mensaje de notificacion" />

			<if test="/request-context/services-responses/notificacion_pago/notificar_eps_ws/response/code = 0 and /request-context/services-responses/notificacion_pago/notificar_eps_ws/response/data != -1">

				<if test="/request-context/services-responses/notificacion_pago/transformarResp/response/data/message/body/status/status_code = 0">
					<!--Replicamos lo que hacemos en el flujo principal cuando la eps nos response de manera exitosa-->

					<service id="notificar_pago-reintento" name="TRANS" description="Se actualiza el estado de los pagos a notificado" />
					<!--Evaluar si vale la pena hacer por el reinyector-->
					<asyncservice id="reinj-realizar-pago-g-en-reintento" name="TRANS" description="Realizar pago en la gestion(usando reinector)" />
												
					<!--Se le response 0 al reinyector, para que este no siga reinyectando-->
					<return id="return-reintento"/>	
				</if>
				<else>
					<return id="error-reintento"/>
				</else>
			</if>
			<else>
				<!--Devolvemos error de reinyector, es decir 1, no nos interesa el tipo de errr-->
				<return id="error-reintento"/>
			</else>
		</if>

		<!--Se realiza el flujo de notificacion de pago convencional-->
		<else>

			<service id="id_trx_eft" name="TRANS" description="Se obtiene id trx eft" />

			<!--<service id="convenio" name="CONV1" description="Se consultan todos los datos del convenio" cached="true" cached-if="/agreements/code= 0"/>-->

			<!--Las validaciones tan pendientes-->
			<call id="validaciones" workflow-file="../etc/workflows_validaciones.xml" workflow="default" />  	
			<!-- <service id="validaciones" name="ORC03" /> -->

			<!--verificamos que se cumplan todas las validaciones-->	
			<if test="/request-context/services-responses/notificacion_pago/validaciones/message/header/status_code != 0">
				<!--retornamos un mensaje de error acorde al tag que no cumplió la validación-->
				<return id="error-validaciones" />
	 		</if>

	 		<!--una vez que estamos seguros de que se cumplen todas las validaciones validamos que los pagos sean validos-->
	 		<service id="valida_pagos_bd" name="TRANS" description="Se valida que todos los pagos sean validos"/>

	 		<!--podemos hacer un echo para validar que todos los pagos son validos-->
	 		<echo id="valida_pagos"/>



	 		<!--Antes de aplicar las reglas de pago, debemos actualizar los montos, para que incluyan las cuotas e impuestos en caso de existir-->
	 		<!--Las validaciones siguen igual, la unica diferencia es que el monto ahora es mayor, pero si no se aceptan pagos parciales ni sobrepagos, los montos exactos deberian validarse igual-->

	 		<!--revisamos la respuesta del echo-->
	 		<!--dar una vuelta para ver si debemos hacer una validación a esto-->
	 		<if test="/request-context/services-responses/notificacion_pago/valida_pagos/response/code != 0">
	 			<!--Devolvemos el detalle de los pagos indicando cuales son los que no pasaron la validacion-->
				<return id="error-pagos_no_validos"/>


				<!--En esta instancia, se puede agregar una consulta de deuda a la eps, en caso de que la modalidad sea online, para obtener la data que no se encontro en la bd, y de esa manera se pueda aplicar las reglas de pago-->

				<!--Posterior a la consulta de deuda, se validan si todos los pagos que vienen en el mensaje, se encuentran en la deuda obtenida-->

				<!--Cuando se realiza la consulta, se almacenan los pagos que no se encuentren en la bd, esto utilizando una llave que permita saber si el pago existe {id_servicio, id_cliente, folio}-->
			</if>


			<!--Si la comision no esta activada, entonces el monto bruto sera igual al monto neto-->

			<echo id="actualiza_montos" name="TRANSF" description="Se actualizan los montos a pagar, agregando la comision en linea e impuestos, siempre y cuando existan"/>
			


			<!--comienzan las validaciones de las reglas de pago-->


			<!--validacion de monto minimo-->
			<if test="/request-context/services-responses/default/convenio/msg/reglas_pago/monto_minimo/habilitado = 1">
				<!--La validacion de monto minimo solo se hace si efectivamente esta activada, de lo contrario el monto no se valida-->
				<echo id="valida_montos_minimos"/>
				<echo id="busca_montos_minimos"/>

				<if test="/request-context/services-responses/notificacion_pago/busca_montos_minimos/response/code != 0">
					<return id="error_montos_minimos"/>
				</if>
			</if>


			<!--pago deuda vencida-->
			<if test="/request-context/services-responses/default/convenio/msg/reglas_pago/deudaVencida = 0">
				<!--Como no se admiten pagos de deuda vencida, debemos validar que no haya ningun pago correspondiente a una deuda vencida-->
				<echo id="valida_pagos_vencidos"/>
				<echo id="buscar_pagos_vencidos"/>

				<if test="/request-context/services-responses/notificacion_pago/buscar_pagos_vencidos/response/code != 0">
					<return id="error_pagos_vencidos"/>
				</if>
			</if>

			<!--pagos duplicados-->
			<if test="/request-context/services-responses/default/convenio/msg/reglas_pago/duplicidadPagos != 0">
				<!--Como no se admiten pagos de deuda vencida, debemos validar que no haya ningun pago correspondiente a una deuda vencida-->


				<service id="valida_pagos_duplicados" name="TRANS" description="Se valida que los pagos no esten duplicados"/>
				<echo id="buscar_pagos_duplicados"/>

				<if test="/request-context/services-responses/notificacion_pago/buscar_pagos_duplicados/response/code != 0">
					<return id="error_pagos_duplicados"/>
				</if>
			</if>

			<!--pagos parciales-->
			<if test="/request-context/services-responses/default/convenio/msg/reglas_pago/pagosParciales = 0">
				<!--Como no se admiten pagos de deuda vencida, debemos validar que no haya ningun pago correspondiente a una deuda vencida-->
				<echo id="valida_pagos_parciales"/>
				<echo id="buscar_pagos_parciales" />
				<if test="/request-context/services-responses/notificacion_pago/buscar_pagos_parciales/response/code != 0">
					<return id="error_pagos_parciales"/>
				</if>
			</if>			

			<!--sobrepagos-->
			<if test="/request-context/services-responses/default/convenio/msg/reglas_pago/sobrePagos = 0">
				<!--Como no se admiten pagos de deuda vencida, debemos validar que no haya ningun pago correspondiente a una deuda vencida-->
				<echo id="valida_sobrepagos"/>
				<echo id="buscar_sobrepagos"/>

				<if test="/request-context/services-responses/notificacion_pago/buscar_sobrepagos/response/code != 0">
					<return id="error_sobrepagos"/>
				</if>
			</if>
			<else>


				<!--Se debe realizar el descuento de la comision y el impuesto-->

				<!--Ingresamos aqui si es que se aceptan sobrepagos-->
				<!--Significa que si aceptamos sobrepagos, por lo que realizamos la validacion en caso de no aceptar sobrepagos sobre el total-->
				<if test="/request-context/services-responses/default/convenio/msg/reglas_pago/sobrePagoTotal = 0">
					<!--Siempre vamos a usar el dato de la primera cuota que traemos-->
					<if test="/request-context/request/message/body/total_amount &gt; /request-context/services-responses/notificacion_pago/valida_pagos_bd/response/data/Results/Row/MONTO_DEUDA_TOTAL">
						<!--Significa que el monto que se quiere pagar a traves del sobrepago supera la deuda total del cliente asociada a la llave id_cliente y id_servicio-->
						<return id="error_sobrepagototal"/>
					</if>
				</if>
			</else>


			<!--En esta instancia sabemos que si es pago mixto, los medios de pago utilizados son validos en relación al canal y el convenio-->
			<if test="/request-context/request/message/body/payment_type = 'PM'">

				<!--Esta validacion trabaja con montos en bruto, por lo que no se ve afectada-->
				<echo id="validar_pagos_mixtos" />
				<echo id="buscar_pm_incorrectos"/>

				<if test="/request-context/services-responses/notificacion_pago/buscar_pm_incorrectos/response/code != 0">
					<return id="error_pagos_mixtos"/>
				</if>

				<!--Se utiliza al momento de realizar los insert-->
				<!--No se va a utilizar-->
				<!--<echo id="actualiza_montos_pm" description="Calcula las comisiones e impuestos para los pagos mixtos"/>-->
				<echo id="actualiza_monto_bruto" description="Aplica decimales a los montos asociados a cada medio de pago"/>
			</if>
			<!--Finalizan las validaciones de las reglas de pago-->


			<!--Si son todos validos entonces hacemos el insert de la totalidad de los pagos-->
			<if test="/request-context/services-responses/default/convenio/msg/reglas_pago/modalidad/offline = 1">
				<!--Modalidad batch-->
				
				<service id="insertar_pagos" name="TRANS" description="Se insertan todos los pagos"/>

		   		<!--Si ocurre un error al momento de hacer el insert finaliza el flujo y se retorna un error-->
		   		<if test="/request-context/services-responses/notificacion_pago/insertar_pagos/response/code != 0 or /request-context/services-responses/notificacion_pago/insertar_pagos/response/data = '-1'">
		   			<!--Falta implementar-->
		    		<return id="error-inertar_pagos" />
				</if>

				<!--Se utiliza el reinyector-->
				<!--Si falla un pago fallan todos los pagos-->
				<asyncservice id="reinj-insertar_pagos-g" name="TRANS" description="Insertar pagos en gestión(usando reinyector)" />

				<!--Se actualiza la deuda total-->
				<service id="reinj-actualizar_deuda-t" name="TRANS" description="Actualizar la deuda total del cliente asociado al servicio" />
					
				<return id="return" />	
			</if>

			<elseif test="/request-context/services-responses/default/convenio/msg/reglas_pago/modalidad/online = 1 ">
				<!--Modalidad online-->
				<!--En este apartado se puede ralizar cualquier proceso para agregar mas informacion al mensaje que se va a enviar a la eps-->
				<!--Los valores para la secuencia los obtener a partir de la consulta previa que se hizo a base de datos, por lo que no es necesario obtenerlos nuevamente-->

				<service id="insertar_pagos_linea_com" name="TRANS" description="Se inserta el pago en la base de datos transaccional"/>


				<if test="/request-context/services-responses/notificacion_pago/insertar_pagos_linea/response/code != 0 or /request-context/services-responses/notificacion_pago/insertar_pagos_linea/response/data = '-1'">
					<!--Si ingresamos aqui significa que ocurrió un error al momento de insertar los pagos -->
					<!--Ver como evitar la inserción de pagos duplicados-->
					<return id="error-insertar_pagos_linea" />
				</if>

                <asyncservice id="insertar_pagos_linea_gestion_com" name="TRANS" description="Se inserta el pago en la base de datos de gestion"/>
                <asyncservice id="guardar-comision" name="TRANS" description="guarda comision del convenio" />

				<echo id="transformar" name="TRANSF" agreement-id="/request-context/request/message/body/contract_id" description="Se obtiene la transformacion para el mensaje de notificacion" />
				<!--Luego de armar el mensaje se decide si se notifica en linea o mediante reintentos-->
				
				
				
				<!--La notificacion se hace de manera sincrona a la empresa de servicio-->
					<service id="notificar_eps_ws" name="TRANS" description="Se notifican los pagos a la eps"/>

					<echo id="transformarResp" name="TRANSF" agreement-id="/request-context/request/message/body/contract_id" description="Se mapea la respuesta de la eps"/>
				
				
				
				<!--La comunicacion se evalua con la respuesta del conector-->
					<if test="/request-context/services-responses/notificacion_pago/notificar_eps_ws/response/code = 0 and /request-context/services-responses/notificacion_pago/notificar_eps_ws/response/data != -1">

						<!--Se asume que la respuesta va a conservar el data, y luego del data, se va mostrar el estado-->
						<if test="/request-context/services-responses/notificacion_pago/transformarResp/response/data/message/body/status/status_code = 'CEF999'">
							<!---No se pudo aplicar el pago en la empresa de servicio,la empresa responde con codigo para reintentar se debe reintentar-->
						
								<!--Si aceptamos reintentos entonces no notificamos en linea, si no que enviamos un mensaje al reinyector-->
							<service id="notificar_eps_reinj" name="REINJ" description="Se envia un mensaje al reinyector para notificar el pago"/>

								<if test="/request-context/services-responses/notificacion_pago/notificar_eps_reinj/response/code != 0">
									<!--El mensaje no fue recibido correctamente por el reinyector-->
									<!--Se reutiliza el mensaje de error para errores de aplicacion-->
									<return id="error-notificar-aplicacion_ws"/>
								</if>
								<else>
									<!--Se responde de manera exitosa al recaudador-->
									<return id="return_reinj"/>
								</else>

						</if>
						<elseif test="/request-context/services-responses/notificacion_pago/transformarResp/response/data/message/body/status/status_code = 0">
									<!--Si ingresamos significa que la notificacion de pago es exitosa-->
							<!--Tenemos que incluir el id_trx_eps en los insert-->


							<service id="notificar_pago" name="TRANS" description="Se actualiza el estado de los pagos a notificado" />
							<!--Se insertan todos los pagos en la base de datos de gestión como aceptados y notificados-->
							<!--Vamos a reciclar el flujo de reinyección del flujo batch-->

							<!--Se recicla 

							<service id="reinj-realizar-pago-g_com" name="REINJ" description="Realizar pago en la gestion(usando reinector)" />	-->


						  <!--Evaluar si vale la pena hacer por el reinyector-->
							<asyncservice id="reinj-realizar-pago-g-reintento" name="TRANS" description="Realizar pago en la gestion(usando reinector)" />	

												
								<!--Se retorna un mensaje de exito, indicando que todos los pagos se insertador y notificaron de manera correcta-->	

							<!--No se actualiza la deuda total, ya que como la modalidad es en linea, es de esperar que la empresa nos devuelva la deuda total en cada consulta-->
							<!--<service id="reinj-actualizar_deuda-t" name="REINJ" description="Actualizar la deuda total del cliente asociado al servicio" />-->

							<return id="return_linea" />

						</elseif>
						<else>
							
                       <!--se retorna el error reportado por la empresa de servicio hacia el facturador, son los estados que no se reintentan-->
					   <!---No se pudo aplicar el pago en la empresa de servicio-->
							<service id="modificar_estado_pago_trx" name="TRANS" description="Se modifica el estado de todos los pagos a intento de pago en bd trx" />
							<asyncservice id="modificar_estado_pago_trx-g" name="TRANS" description="Se modifica el estado de todos los pagos a intento de pago en bd gestion" />
							<!--Se insertan todos los pagos en la base de datos de gestión como intento de pago y no notificados-->
							<!--El insert tiene soporte para pagos mixtos, por eso es mas extenso-->
							<!--Se recicla un flujo existente debido a lo generico de la situación-->


													
							<return id="return_linea_error_eps" />	
						</else>

						<!--Una vez notificados los pagos, se debe actualizar el estado de los pagos en la bd transaccional, y insertar los pagos en la base de datos de gestión como no notificados-->

					</if>

					<else>
						<!---No se pudo aplicar el pago en la empresa de servicio, se debe reintentar-->
						
						<!--Si aceptamos reintentos entonces no notificamos en linea, si no que enviamos un mensaje al reinyector-->
					<service id="notificar_eps_reinj" name="REINJ" description="Se envia un mensaje al reinyector para notificar el pago"/>

						<if test="/request-context/services-responses/notificacion_pago/notificar_eps_reinj/response/code != 0">
							<!--El mensaje no fue recibido correctamente por el reinyector-->
							<!--Se reutiliza el mensaje de error para errores de aplicacion-->
							<return id="error-notificar-aplicacion_ws"/>
						</if>
						<else>
							<!--Se responde de manera exitosa al recaudador-->
							<return id="return_reinj"/>
						</else>

					</else>

			</elseif>
			<else>
				<!--reservado para modalidad mixta-->
			</else>
		</else>

	</workflow>
	
	
	
	
	<!--Reinyector para los pagos en la base de datos de gestión-->
	<workflow id="reinj-add-pago" xsl-path="../etc/xsls/clientehr/reinj-add-pago">

		<service id="realizar_pago_gestion" name="TRANS" description="Se realiza pago en la gestion"/>
		
		<if test="/request-context/services-responses/reinj-add-pago/realizar_pago_gestion/response/code != 0 or /request-context/services-responses/reinj-add-pago/realizar_pago_gestion/response/data = '-1'">
			<!--De momento esto queda pendiente dado que no se esta utilizando un procedimiento almacenado-->
			<!--/request-context/services-responses/reinj-add-pago/realizar_pago_gestion/response/data/Results/Row/RETORNO != '000'-->
    		<return id="error" />
		</if>    
		<else>
			<return id="return" />
		</else>
	</workflow>

	<!--Reinyector para actualizar la deuda una vez que se realizan los pagos-->
	<workflow id="reinj-update-debt" xsl-path="../etc/xsls/clientehr/reinj-update-debt">

		<service id="actualizar_deuda_trx" name="TRANS" description="Se actualiza la deuda total asociada al cliente y servicio"/>
		
		<if test="/request-context/services-responses/reinj-update-debt/actualizar_deuda_trx/response/code != 0 or /request-context/services-responses/reinj-update-debt/actualizar_deuda_trx/response/data = '-1' or /request-context/services-responses/reinj-update-debt/actualizar_deuda_trx/response/data/Results/Row/RETORNO != '000'">
			<!--De momento esto queda pendiente dado que no se esta utilizando un procedimiento almacenado-->
			<!--/request-context/services-responses/reinj-add-pago/realizar_pago_gestion/response/data/Results/Row/RETORNO != '000'-->
    		<return id="error" />
		</if>    
		<else>
			<return id="return" />
		</else>
	</workflow>

	<!--flujo en proceso-->
	<workflow id="reversa_pagos" xsl-path="../etc/xsls/clientehr/reversa_pagos">

		<if test="/request-context/request/message/header/msg_type = 'SRRP01'">
			<!--Se realizan los reintentos de reversa-->
			<service id="reversa_pago_ws" name="TRANS" description="Se envia mensaje de reversa de pago a la empresa de servicio"/>

			<echo id="transformarResp" name="TRANSF" agreement-id="/request-context/request/message/body/contract_id" description="Se obtiene la transformacion para el mensaje de reversa"/>

			<if test="/request-context/services-responses/reversa_pagos/reversa_pago_ws/response/code = 0 and /request-context/services-responses/reversa_pagos/reversa_pago_ws/response/data != -1">
				
				<if test="/request-context/services-responses/reversa_pagos/transformarResp/response/data/message/body/status/status_code = 0">
					<!--Replicamos lo que hacemos en el flujo principal cuando la eps nos response de manera exitosa-->
		 			<service id="reversar_pagos_linea-reintento" name="TRANS" />
					<asyncservice id="reinj-reversar_linea_pagos-g-reintento" name="TRANS" description="Reversar pagos en gestion(usando reinyector)"/>

					<return id="return-reintento"/>
					<!--Se le response 0 al reinyector, para que este no siga reinyectando-->
				</if>
				<else>
					<return id="error-reintento"/>
				</else>
			</if>
			<else>
				<!--Devolvemos error de reinyector, es decir 1, no nos interesa el tipo de errr-->
				<return id="error-reintento"/>
			</else>
		</if>
		<else>
			<!--Es una reversa de pagos convencional-->
			<service id="id_trx_eft_rev" name="TRANS" description="Se obtiene id trx rev" />

			<!--<service id="convenio" name="CONV1" description="Se consultan todos los datos del convenio" cached="true" cached-if="/agreements/code= 0"/>-->
			<!--Es importante validar si el convenio permite reversa-->
			<!--Se debe verificar si existe alguna condicion para realizar la reversa, como por ejemplo que sea en el mismo día, cantidad de horas, etc-->
		
			<!-- <service id="validaciones" name="ORC03" /> -->
			<call id="validaciones" workflow-file="../etc/workflows_validaciones.xml" workflow="default" />
			
			<if test="/request-context/services-responses/reversa_pagos/validaciones/message/header/status_code != 0">
				<return id="error-validaciones" />
	 		</if>

	 		<!--validaciones de negocio-->
	 		<!--aqui tenemos que validar con el id_trx_rec y el total_amount-->
	 		<service id="busca_cuotas" name="TRANS" description="Se busca si existen cuotas asociadas al id_trx_rec"/>

	 		<!--No validamos el tema del data=-1-->
	 		<if test="count(/request-context/services-responses/reversa_pagos/busca_cuotas/response/data/Results/Row/CUOTAS) = 0">
	 			<return id="error-no_hay_cuotas"/>
	 		</if>
	 		
	 		
	 		<!--  si viene configurado un tiempo maximo de espera se realiza validacion -->
	 		<if test="/request-context/services-responses/default/convenio/msg/timeoutReversa > 0">
	 			 			 	
		 		<if test="/request-context/services-responses/reversa_pagos/busca_cuotas/response/data/Results/Row/NO_VALID = 1">
		 			<return id="error-tiempo_superado"/>
		 		</if>
	 		
	 		</if>

	 		<!--No validamos el tema del data=-1-->
	 		<!--Si se almacena el monto bruto, y la reversa tambien lo incluye, no debemos cambiar nada-->
	 		<service id="consulta_total" name="TRANS" description="Se consulta el total de los montos asociados al id_trx_rec que se desea reversar"/>

	 		<echo id="actualiza_monto_bruto" name="TRANSF" description="Se aplican los decimales al total amoun de la peticion"/>

	 		<!--No validamos el tema del data=-1-->
	 		<if test="not(count(/request-context/services-responses/reversa_pagos/consulta_total/response/data/Results/Row/SUMA) >0 and /request-context/services-responses/reversa_pagos/consulta_total/response/data/Results/Row/SUMA = /request-context/services-responses/reversa_pagos/actualiza_monto_bruto/total_amount/bruto)">
	 			<return id="error_total_distinto"/>
	 		</if>


			<!--Finalizan validaciones de negocio-->
			<service id="reversar_pagos" name="TRANS" />
	   		<!--Si ocurre un error al momento de hacer la reversa finaliza el flujo y se retorna un error-->
	   		<if test="/request-context/services-responses/reversa_pago/reversar_pagos/response/code != 0 or /request-context/services-responses/reversa_pago/reversar-pagos/response/data = '-1'">
	   			<!--Falta implementar-->
	    		<return id="error-reversar_pagos" />
			</if>
	
			<asyncservice id="reinj-reversar_pagos-g" name="TRANS" description="Reversar pagos en gestion(usando reinyector)"/>


	 		<!--Se agrega consulta para distinguir si la reversa es batch u online-->
	 		<if test="/request-context/services-responses/default/convenio/msg/reglas_reversa/modalidad/offline = 1">
		 		
				<return id="return"/>
	 		</if>

	 		<elseif test="/request-context/services-responses/default/convenio/msg/reglas_reversa/modalidad/online = 1">
	 			
	 			<!--reversa online-->
	 			<!--Se obtiene mensaje de transformacion-->
	 			<echo id="transformar" name="TRANSF" agreement-id="/request-context/request/message/body/contract_id" description="Se obtiene la transformacion para el mensaje de consulta" />


	 			<!--Se consulta si la reinyeccion se realiza mediante reintentos, o de manera sincrona-->
	 			<if test="/request-context/services-responses/default/convenio/msg/reglas_reversa/aceptaReintentos = 1">
	 				<!--La reversa se realiza de manera asincrona usando el reinyector-->
	 				<service id="reversar_eps_reinj" name="REINJ" description="Se envia al reinyector un mensaje para reversar el pago"/>

	 				<if test="/request-context/services-responses/reversa_pagos/reversar_eps_reinj/response/code != 0 ">
	 					<!--El mensjae no se agrego de manera correcta a la cola de reinyeccion-->
	 					<return id="error-reinj"/>
	 				</if>
	 				<else>
	 					<!--Se response ok al recaudador-->
	 					<return id="return"/>
	 				</else>
	 			</if>
	 			<else>
	 				<!--La reversa se realiza de manera sincrona-->
		  			<service id="reversa_pago_ws" name="TRANS" description="Se envia la notificación de reversa a la eps"/>

		 			<echo id="transformarResp" name="TRANSF" agreement-id="/request-context/request/message/body/contract_id" description="Se mapea la respuesta de la empresa de la eps" />


		 			<!--La comunicacion se valida usando la respuesta del conector y no el mapeo-->
		 			<if test="/request-context/services-responses/reversa_pagos/reversa_pago_ws/response/code = 0 and /request-context/services-responses/reversa_pagos/reversa_pago_ws/response/data != -1">
		 				<if test="/request-context/services-responses/reversa_pagos/transformarResp/response/data/message/body/status/status_code = 0">
		 					<!--Se debe incluir una columna para id id_trx_rev_eps-->
		 					<!--Al actualizar los pagos a reversados, debemos actualizar el id_trx_rev_eps-->
		 					<service id="reversar_pagos_linea" name="TRANS" />

					   		<if test="/request-context/services-responses/reversa_pago/reversar_pagos/response/code != 0 or /request-context/services-responses/reversa_pagos/reversar-pagos/response/data = '-1'">
					   			<!--Falta implementar-->
					    		<return id="error-reversar_pagos" />
							</if>

							<asyncservice id="reinj-reversar_linea_pagos-g" name="TRANS" description="Reversar pagos en gestion(usando reinyector)"/>

							<return id="return"/>
		 				</if>
		 				<else>
		 					<!--error que ocurre en la eps, puede ser propio de ellos, o debido a que les faltó información-->
		 					<return id="error-aplicacion_ws"/>
		 				</else>
		 			</if>
		 			<else>
		 				<return id="error-comunicacion_ws"/>
		 			</else>
	 			</else>


	 		</elseif>
	 		<else>
	 			<!--No tiene habilitada reversa -->
	 			<!--se responde msj asociado-->
				<return id="return_reversa_no_permitida"/>
				
	 		</else>

		</else>
		<!--El resultado de esto se envia a las validaciones-->
	</workflow>


	<!--Reinyector para reversar los pagos en la base de datos de gestón-->
	<workflow id="reinj-reversa-pagos" xsl-path="../etc/xsls/clientehr/reinj-reversa-pagos">

		<service id="reversar_pagos_gestion" name="TRANS" description="Se reversan pagos en la base de datos de gestión"/>
		
		<if test="/request-context/services-responses/reinj-reversa-pagos/reversar_pagos_gestion/response/code != 0 or /request-context/services-responses/reinj-reversa-pagoss/realizar_pago_gestion/response/data = '-1'">
			<!--De momento esto queda pendiente dado que no se esta utilizando un procedimiento almacenado-->
			<!--/request-context/services-responses/reinj-add-pago/realizar_pago_gestion/response/data/Results/Row/RETORNO != '000'-->
    		<return id="error" />
		</if>    
		<else>
			<return id="return" />
		</else>
	</workflow>


	<workflow id="notificacion_pago_conciliacion" xsl-path="../etc/xsls/clientehr/notificacion_pago_conciliacion">

		<service id="consultar_id_trx_rec" name="TRANS" description="Se busca el id_trx_rec en la base de datos trx"/>
		<service id="consultar_id_trx_rec_gestion" name="TRANS" description="Se busca el estado de conciliacion en gestion si existe"/>


		<!--El pag_id se puede repetir entre pagos que forman parte de la misma notificación de pago, sin embargo el mecanismo para obtenerlo debería traer el pag_id asociado al pago que queremos-->
		<if test="count(/request-context/services-responses/notificacion_pago_conciliacion/consultar_id_trx_rec/response/data/Results/Row/PAG_ID) = 0
			or /request-context/services-responses/notificacion_pago_conciliacion/consultar_id_trx_rec_gestion/response/data/Results/Row/ESTADO_CONCILIACION != 4">

			<!--Se ingresa cuando el pago no esta en ninguna base de datos-->

			<!--analizar esto, ya que de momento, pagos que formen parte de la misma notificación, quedarían con id_trx_eft distinto-->
			<!--Unificamos las condiciones, ya que cuando el pago ya habia sido conciliado, el único motivo por el cual insertabamos el pago haciamos todo en un if distinto, era para que se saltara la validación del id_trx_rec ya esta en la base de datos-->

			<!--Dar una vuelta si debemos revivior dicha validacion, de revisar que el id_trx_rec no este en la base de datos más de una vez, esto debería ser inviable, ya que todos los pagos asociados a una notificacion tendran el mismo id_trx_rec-->

			<service id="id_trx_pago_eft" name="TRANS" description="Se obtiene id trx eft" />

			<!--<service id="convenio" name="CONV1" description="Se verifica si existe el convenio" cached="true" cached-if="/agreements/code= 0"/>-->
				
			<!-- <service id="validaciones" name="ORC03" /> -->
			<call id="validaciones" workflow-file="../etc/workflows_validaciones.xml" workflow="default" />

			<if test="/request-context/services-responses/notificacion_pago_conciliacion/validaciones/message/header/status_code != 0">
				<return id="error-validaciones" />
	 		</if>

	 		<service id="consulta_pag_id" name="TRANS" description="Se consulta por un pag_id para el pago"/>

			<service id="realizar_pago" name="TRANS" description="Realiza pago al hub" />

	   		<if test="/request-context/services-responses/notificacion_pago_conciliacion/realizar_pago/response/code != 0 or /request-context/services-responses/notificacion_pago_conciliacion/realizar_pago/response/data = '-1'">
	    		<return id="error-inertar_pago" />
			</if>

			<service id="realizar_pago_gestion" name="TRANS" description="Realiza pago al hub" />

			<return id="return" />
			
		</if>

		<else>

				<!--Si entra acá significa que el pago si está en la bd trx y no en la bd de gestión-->
				<!--Si entra acá se asume que el pago tiene estado_pago aceptado, ya que esa condición la validamos más arriba-->
				<!--En la consulta trajimos el pag_id,id_trx_eft,service_id,doc_id,estado_notificacion,estado_pago,estado_conciliacion-->
				<!--Insertamos el pago en la base de datos de gestión como aceptado, notificado y conciliado, no tomamos en cuenta la base de datos trx, ya que solo nos enfocamos en que quede bien en la de gestión-->

				<!--<service id="convenio" name="CONV1" description="Se verifica si existe el convenio" cached="true" cached-if="/agreements/code= 0"/>-->
					
				<!-- <service id="validaciones" name="ORC03" /> -->
				<call id="validaciones" workflow-file="../etc/workflows_validaciones.xml" workflow="default" />

				<if test="/request-context/services-responses/notificacion_pago_conciliacion/validaciones/message/header/status_code != 0">
					<return id="error-validaciones" />
		 		</if>
					
		 		<!--Hay que analizar de donde sacamos los parametros que queremos enviar-->
		 		<!--Es distinto por que rescata el pag_id y el id_trx_eft que ya esta en la base detos-->
				<service id="realizar_pago_gestion_2" name="TRANS" description="Realiza pago al hub" />

				<return id="return_2" />	

		</else>
	</workflow>


	<workflow id="consulta_pago" xsl-path="../etc/xsls/clientehr/consulta_pago">
		<!--  Se realiza validaciones -->
		<!-- <service id="validacionesforma" name="ORC03" />-->	
		<call id="validaciones" workflow-file="../etc/workflows_validaciones.xml" workflow="default" />
			
		<if test="/request-context/services-responses/consulta_pago/validacionesforma/message/header/status_code != 0">
			<return id="error-validacionesforma" />
 		</if>

        	<!--esto no debe ir-->		
		<!--<service id="convenio" name="CONV1" description="Se consulta el convenio" cached="true" cached-if="/agreements/code= 0" />-->
					
		<!-- <service id="validacionesfondo" name="ORC03" /> -->		
		<call id="validaciones" workflow-file="../etc/workflows_validaciones.xml" workflow="default" />
		
		<if test="/request-context/services-responses/consulta_pago/validacionesfondo/message/header/status_code != 0">
				<return id="error-validacionesfondo" />
		</if>

		<service id="consulta_pago_total_registros" name="TRANS" description="Se consulta cantidad total de pagos asociados a la consulta" />
		<service id="consulta_pago_bd" name="TRANS" description="Se consulta por los pagos a la BD" />
		
		<if	test="/request-context/services-responses/consulta_pago/consulta_pago_bd/response/code = 0" >
			<return id="return" />
		</if>
		
		<else>
			<return id="error-consulta_pago" />
		</else>
	</workflow>


	<workflow id="notificacion_pago_portal" xsl-path="../etc/xsls/clientehr/notificacion_pago_portal">

		<!--<service id="convenio" name="CONV1" description="Se verifica si existe el convenio" cached="true" cached-if="/agreements/code= 0"/>-->

		<if test="/request-context/services-responses/default/convenio/msg/code" not-equals="0">
		    <return id="error-convenio" />
		</if>
		<!--  se valida que el recaudador enviado en la consulta sea el mismo que está configurado en el convenio  -->
		<if test="/request-context/request/message/header/collector_id  != /request-context/services-responses/default/convenio/msg/collector-code">
		    <return id="error-collector-agreement" />
		</if>
		<!--  se valida que la empresa de servicio enviada en la consulta sea el mismo que está configurado en el convenio  -->
		<if test="/request-context/request/message/header/company_id != /request-context/services-responses/default/convenio/msg/company-code">
		  <return id="error-company-agreement" />
		</if>
		<!--  Se consultan las deudas para validar los montos -->
		<service id="consultadeuda" name="TRANS" description="Se consulta deuda directo a la BD" />
		<if test="/request-context/services-responses/notificacion_pago_portal/consultadeuda/response/code != 0 or /request-context/services-responses/notificacion_pago_portal/consultadeuda/response/data = -1 ">
		    <return id="error-consultadeuda" />
		</if>
			
		<service id="idtrxeft" name="TRANS" description="Se obtiene id trx eft" />

		<service id="pagadeuda" name="TRANS" description="Se registra pago como notificado" />

		<if test="/request-context/request/message/body/transmitter = '999'">
		    <service id="pago_webpay" name="TRANS" description="Se registra data de pago webpay" />
		</if>

	        <service id="pagadeuda_gestion" name="TRANS" description="Se registra pago como notificado bd gestion" />	
		<!-- En return va el caso en que la intencion de pago no sea exitosa. Involucra un loop -->
		<return id="return" />

	</workflow>


	<workflow id="intencion_pago" xsl-path="../etc/xsls/clientehr/intencion_pago">

		<service id="idtrxeft" name="TRANS" description="generacion id_TRX_PAGO_EFT" />		
		<service id="intencionpago" name="TRANS" description="Se registra intencion de pago" />
		<service id="intencionpago_gestion" name="TRANS" description="Se registra intencion de pago" />
		<!-- En return va el caso en que la intencion de pago no sea exitosa -->
		<return id="return" />
	</workflow>
	


	<workflow id="get_comprobante_pago" xsl-path="../etc/xsls/clientehr/comprobante">
		<!--<service id="convenio" name="CONV1" description="Se consulta por las politicas" cached="true" cached-if="/agreements/code= 0"/>-->
		<if
		    test="/request-context/services-responses/default/convenio/msg/code" not-equals="0">
		    <return id="error-convenio" />
		</if>
		<service id="getComprobantePago" name="TRANS" description="Se obtiene comprobante de pago" />
		<return id="return" />
	</workflow>

	
	<workflow id="get_convenio_portal" xsl-path="../etc/xsls/clientehr/convenio_portal">
		<if test="/request-context/services-responses/default/convenio/msg/code" not-equals="0">
			<return id="error-convenio"/>
		</if>
		<return id="return-convenio"/>
	</workflow>	

</workflows>

